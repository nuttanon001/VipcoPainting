// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using VipcoPainting.Models;

namespace VipcoPainting.Migrations
{
    [DbContext(typeof(PaintingContext))]
    [Migration("20171214073844_UpdateModel")]
    partial class UpdateModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("VipcoPainting.Models.ColorItem", b =>
                {
                    b.Property<int>("ColorItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ColorCode")
                        .HasMaxLength(50);

                    b.Property<string>("ColorName")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("CreateDate");

                    b.Property<string>("Creator")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<string>("Modifyer")
                        .HasMaxLength(50);

                    b.Property<double?>("VolumeSolids");

                    b.HasKey("ColorItemId");

                    b.ToTable("ColorItem");
                });

            modelBuilder.Entity("VipcoPainting.Models.ProjectCodeMaster", b =>
                {
                    b.Property<int>("ProjectCodeMasterId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateDate");

                    b.Property<string>("Creator");

                    b.Property<DateTime?>("EndDate");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<string>("Modifyer");

                    b.Property<string>("ProjectCode");

                    b.Property<string>("ProjectName");

                    b.Property<DateTime?>("StartDate");

                    b.HasKey("ProjectCodeMasterId");

                    b.ToTable("ProjectCodeMaster");
                });

            modelBuilder.Entity("VipcoPainting.Models.ProjectCodeSub", b =>
                {
                    b.Property<int>("ProjectCodeSubId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateDate");

                    b.Property<string>("Creator")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<string>("Modifyer")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<int?>("ProjectCodeMasterId");

                    b.Property<int?>("ProjectSubParentId");

                    b.HasKey("ProjectCodeSubId");

                    b.HasIndex("ProjectCodeMasterId");

                    b.HasIndex("ProjectSubParentId");

                    b.ToTable("ProjectCodeSub");
                });

            modelBuilder.Entity("VipcoPainting.Models.RequirePaintingList", b =>
                {
                    b.Property<int>("RequirePaintingListId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateDate");

                    b.Property<string>("Creator")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("DrawingNo")
                        .HasMaxLength(150);

                    b.Property<bool?>("FieldWeld");

                    b.Property<bool?>("ITP");

                    b.Property<bool?>("Insulation");

                    b.Property<string>("MarkNo")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<string>("Modifyer")
                        .HasMaxLength(50);

                    b.Property<string>("PartNo")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("PlanEnd");

                    b.Property<DateTime?>("PlanStart");

                    b.Property<double?>("Quantity");

                    b.Property<int?>("RequirePaintingMasterId");

                    b.Property<double?>("SizeH");

                    b.Property<double?>("SizeL");

                    b.Property<double?>("SizeW");

                    b.Property<int?>("UnitNo");

                    b.Property<double?>("Weight");

                    b.HasKey("RequirePaintingListId");

                    b.HasIndex("RequirePaintingMasterId");

                    b.ToTable("RequirePaintingList");
                });

            modelBuilder.Entity("VipcoPainting.Models.RequirePaintingMaster", b =>
                {
                    b.Property<int>("RequirePaintingMasterId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateDate");

                    b.Property<string>("Creator")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("FinishDate");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<string>("Modifyer")
                        .HasMaxLength(50);

                    b.Property<string>("PaintingSchedule")
                        .HasMaxLength(200);

                    b.Property<int?>("ProjectCodeSubId");

                    b.Property<DateTime?>("ReceiveDate");

                    b.Property<string>("ReceiveEmp");

                    b.Property<DateTime?>("RequireDate");

                    b.Property<string>("RequireEmp");

                    b.Property<string>("RequireNo")
                        .HasMaxLength(200);

                    b.HasKey("RequirePaintingMasterId");

                    b.HasIndex("ProjectCodeSubId");

                    b.ToTable("RequirePaintingMaster");
                });

            modelBuilder.Entity("VipcoPainting.Models.RequirePaintingSub", b =>
                {
                    b.Property<int>("RequirePaintingSubId")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Area");

                    b.Property<int?>("ColorItemId");

                    b.Property<DateTime?>("CreateDate");

                    b.Property<string>("Creator")
                        .HasMaxLength(50);

                    b.Property<double?>("DFTMax");

                    b.Property<double?>("DFTMin");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<string>("Modifyer")
                        .HasMaxLength(50);

                    b.Property<int?>("PaintingArea");

                    b.Property<int?>("PaintingType");

                    b.Property<int?>("RequirePaintingListId");

                    b.Property<int?>("StandradTimeId");

                    b.Property<int?>("SurfaceTypeId");

                    b.HasKey("RequirePaintingSubId");

                    b.HasIndex("ColorItemId");

                    b.HasIndex("RequirePaintingListId");

                    b.HasIndex("StandradTimeId");

                    b.HasIndex("SurfaceTypeId");

                    b.ToTable("RequirePaintingSub");
                });

            modelBuilder.Entity("VipcoPainting.Models.StandradTime", b =>
                {
                    b.Property<int>("StandradTimeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateDate");

                    b.Property<string>("Creator")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<string>("Modifyer")
                        .HasMaxLength(50);

                    b.Property<double?>("PercentLoss");

                    b.Property<double?>("Rate");

                    b.Property<string>("RateUnit")
                        .HasMaxLength(50);

                    b.Property<int?>("TypeStandardTime");

                    b.HasKey("StandradTimeId");

                    b.ToTable("StandradTime");
                });

            modelBuilder.Entity("VipcoPainting.Models.SurfaceType", b =>
                {
                    b.Property<int>("SurfaceTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateDate");

                    b.Property<string>("Creator")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<string>("Modifyer")
                        .HasMaxLength(50);

                    b.Property<string>("SurfaceCode")
                        .HasMaxLength(100);

                    b.Property<string>("SurfaceName")
                        .HasMaxLength(200);

                    b.HasKey("SurfaceTypeId");

                    b.ToTable("SurfaceType");
                });

            modelBuilder.Entity("VipcoPainting.Models.ProjectCodeSub", b =>
                {
                    b.HasOne("VipcoPainting.Models.ProjectCodeMaster", "ProjectCodeMaster")
                        .WithMany()
                        .HasForeignKey("ProjectCodeMasterId");

                    b.HasOne("VipcoPainting.Models.ProjectCodeSub", "ProjectSubParent")
                        .WithMany()
                        .HasForeignKey("ProjectSubParentId");
                });

            modelBuilder.Entity("VipcoPainting.Models.RequirePaintingList", b =>
                {
                    b.HasOne("VipcoPainting.Models.RequirePaintingMaster", "RequirePaintingMaster")
                        .WithMany("RequirePaintingLists")
                        .HasForeignKey("RequirePaintingMasterId");
                });

            modelBuilder.Entity("VipcoPainting.Models.RequirePaintingMaster", b =>
                {
                    b.HasOne("VipcoPainting.Models.ProjectCodeSub", "ProjectCodeSub")
                        .WithMany()
                        .HasForeignKey("ProjectCodeSubId");
                });

            modelBuilder.Entity("VipcoPainting.Models.RequirePaintingSub", b =>
                {
                    b.HasOne("VipcoPainting.Models.ColorItem", "ColorItem")
                        .WithMany("RequirePaintingSubs")
                        .HasForeignKey("ColorItemId");

                    b.HasOne("VipcoPainting.Models.RequirePaintingList", "RequirePaintingList")
                        .WithMany("RequirePaintingSubs")
                        .HasForeignKey("RequirePaintingListId");

                    b.HasOne("VipcoPainting.Models.StandradTime", "StandradTime")
                        .WithMany("RequirePaintingSubs")
                        .HasForeignKey("StandradTimeId");

                    b.HasOne("VipcoPainting.Models.SurfaceType", "SurfaceType")
                        .WithMany("RequirePaintingSubs")
                        .HasForeignKey("SurfaceTypeId");
                });
#pragma warning restore 612, 618
        }
    }
}
